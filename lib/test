import 'dart:developer';
import 'dart:math';
import 'package:flutter/widgets.dart';
import 'package:flutter/cupertino.dart';
import 'package:foster_me/models/httpException.dart';
import 'package:foster_me/models/users.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:flutter/material.dart';
import '../screens/MainFoster_screen.dart';
import 'dart:developer';
import 'dart:math';
import 'package:intl/intl.dart';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';

class Auth with ChangeNotifier {
  String _token;
  DateTime _expiryDate;
  String _userId;
  Timer _authTimer;
  String loggedInUser;
  List<User> users = [];

  bool get auth {
    return _token != null;
  }

  User findUserById(String id) {
    return users.firstWhere((user) => user.UserID == id);
  }

  String get token {
    if (_expiryDate != null &&
        _expiryDate.isAfter(DateTime.now()) &&
        _token != null) {
      return _token;
    }
    return null;
  }

  Future<void> _authenticate(
      String email, String password, String UrlSeg) async {
    try {
      final url = Uri.parse(
          'https://identitytoolkit.googleapis.com/v1/accounts:$UrlSeg?key=AIzaSyCl9X4uS0p_cI8uUOEPAgd05kY29TivSy8');
      final response = await http.post(
        url,
        body: json.encode(
          {
            'email': email,
            'password': password,
            'returnSecureToken': true,
          },
        ),
      );
      final responseData = json.decode(response.body);
      if (responseData['error'] != null) {
        throw HTTPException(responseData['error']['message']);
      }
      _token = responseData['idToken'];
      _userId = responseData['localId'];
      _expiryDate = DateTime.now().add(
        Duration(
          seconds: int.parse(
            responseData['expiresIn'],
          ),
        ),
      );
      _autoSignOut();
      notifyListeners();
      final prefs = await SharedPreferences.getInstance();
      final userData = json.encode(
        {
          'token': _token,
          'userId': _userId,
          'expiryDate': _expiryDate.toIso8601String(),
        },
      );
      prefs.setString('userData', userData);
    } catch (error) {
      throw error;
    }
  }

  Future<void> fetchAndSetLoggedInUser() async {
    final url =
        'https://fosterme-7-default-rtdb.firebaseio.com/Users.json?auth=$_token&orderBy="UserId"&equalTo="$loggedInUser"';
    try {
      final response = await http.get(Uri.parse(url));
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      if (extractedData == null) {
        return;
      }
      final List<User> loadedUsers = [];
      extractedData.forEach((userID, userData) {
        try {
          loadedUsers.add(
            User(
                UserID: userID,
                AuthUserID: userData['UserId'],
                Email: userData['Email'],
                isAdmin: userData['isAdmin'],
                formFilled: userData['formFilled'],
                Country: userData['Country'],
                City: userData['city'],
                phoneNo: userData['phoneNo'],
                fullName: userData['fullName'],
                Address: userData['address']),
          );
        } catch (e) {}
      });
      users = loadedUsers;

      notifyListeners();
    } catch (error) {
      // print("This error : " + error);
    }
  }

  Future<void> addUser(
    String email,
    String password,
  ) async {
    try {
      final url = Uri.parse(
          'https://fosterme-7-default-rtdb.firebaseio.com/Users.json?');
      http
          .post(
        url,
        body: json.encode({
          'UserId': _userId,
          'Email': email,
          'isAdmin': false,
          'formFilled': false,
          'fullName': '',
          'phoneNo': '',
          'city': '',
          'Country': '',
          'address': '',
        }),
      )
          .then((response) {
        print(response);
      });
      final response = await http.get(url);
      final extractedData = json.decode(response.body);
      print(extractedData);
    } catch (e) {}
  }

  Future<void> updateUser(String id, User newUser) async {
    // final userIndex = users.indexWhere((user) => user.UserID == id);
    print("Id =  ${id}");
    print("Id =  ${users[0].UserID}");
    final url = Uri.parse(
        'https://fosterme-7-default-rtdb.firebaseio.com/Users/$id.json?');
    print(newUser.fullName);
    http.patch(
      url,
      body: json.encode(
        {
          'fullName': newUser.fullName,
          'phoneNo': newUser.phoneNo,
          'city': newUser.City,
          'Country': newUser.Country,
          'address': newUser.Address,
          'formFilled': true,
        },
      ),
    );
    notifyListeners();
  }

  Future<void> signUpUser(String email, String password) async {
    return _authenticate(email, password, 'signUp')
        .then((value) => addUser(email, password));
  }

  Future<void> loginUser(String email, String password) {
    return _authenticate(email, password, "signInWithPassword").then((value) {
      loggedInUser = _userId;
    }).then((value) => fetchAndSetLoggedInUser());
  }

  Future<void> logout() async {
    _token = null;
    _expiryDate = null;
    _userId = null;
    if (_authTimer != null) {
      _authTimer.cancel();
      _authTimer = null;
    }
    notifyListeners();
    final prefs = await SharedPreferences.getInstance();
    prefs.clear();
  }

  void _autoSignOut() {
    if (_authTimer != null) {
      _authTimer.cancel();
    }
    final timeToExpiry = _expiryDate.difference(DateTime.now()).inSeconds;
    _authTimer = Timer(Duration(seconds: timeToExpiry), logout);
  }

  Future<bool> tryAutoSignin() async {
    final prefs = await SharedPreferences.getInstance();
    if (!prefs.containsKey('userData')) {
      return false;
    }
    final extractedUserData =
        json.decode(prefs.getString('userData')) as Map<String, Object>;
    final expiryDate = DateTime.parse(extractedUserData['expiryDate']);

    if (expiryDate.isBefore(DateTime.now())) {
      return false;
    }
    _token = extractedUserData['token'];
    _userId = extractedUserData['userId'];
    _expiryDate = expiryDate;
    notifyListeners();
    _autoLogout();
    return true;
  }

  void _autoLogout() {
    if (_authTimer != null) {
      _authTimer.cancel();
    }
    final timeToExpiry = _expiryDate.difference(DateTime.now()).inSeconds;
    _authTimer = Timer(Duration(seconds: timeToExpiry), logout);
  }
}
